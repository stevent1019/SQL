<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/steve/OneDrive/Desktop/SQL QS GUIDE/sTunes.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser query pragmas" current="2"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3862"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="V_AvgTotal" custom_title="0" dock_id="1" table="4,10:mainV_AvgTotal"/><dock_state state="000000ff00000000fd0000000100000002000005bb00000390fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000005bb0000011e00ffffff000005bb0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Sample View 1" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="62"/><column index="2" value="75"/><column index="3" value="159"/><column index="4" value="300"/><column index="5" value="159"/><column index="6" value="72"/><column index="7" value="119"/><column index="8" value="104"/><column index="9" value="47"/><column index="10" value="85"/><column index="11" value="79"/><column index="12" value="103"/><column index="13" value="300"/><column index="14" value="300"/><column index="15" value="159"/><column index="16" value="55"/><column index="17" value="119"/><column index="18" value="87"/><column index="19" value="159"/><column index="20" value="151"/><column index="21" value="239"/><column index="22" value="87"/><column index="23" value="75"/><column index="24" value="74"/><column index="25" value="75"/><column index="26" value="159"/><column index="27" value="67"/><column index="28" value="159"/><column index="29" value="159"/><column index="30" value="135"/><column index="31" value="63"/><column index="32" value="49"/><column index="33" value="63"/><column index="34" value="81"/><column index="35" value="143"/><column index="36" value="143"/><column index="37" value="199"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="V_AvgTotal" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="88"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="albums" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="56"/><column index="2" value="300"/><column index="3" value="54"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="artists" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="52"/><column index="2" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="75"/><column index="2" value="79"/><column index="3" value="103"/><column index="4" value="300"/><column index="5" value="300"/><column index="6" value="159"/><column index="7" value="55"/><column index="8" value="119"/><column index="9" value="87"/><column index="10" value="159"/><column index="11" value="151"/><column index="12" value="239"/><column index="13" value="89"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="employees" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="6" mode="1"/></sort><column_widths><column index="1" value="75"/><column index="2" value="71"/><column index="3" value="71"/><column index="4" value="159"/><column index="5" value="67"/><column index="6" value="159"/><column index="7" value="159"/><column index="8" value="223"/><column index="9" value="87"/><column index="10" value="39"/><column index="11" value="55"/><column index="12" value="71"/><column index="13" value="143"/><column index="14" value="143"/><column index="15" value="199"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="genres" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="54"/><column index="2" value="151"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoice_items" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="85"/><column index="2" value="64"/><column index="3" value="54"/><column index="4" value="59"/><column index="5" value="57"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoices" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="0" mode="0"/></sort><column_widths><column index="1" value="62"/><column index="2" value="77"/><column index="3" value="159"/><column index="4" value="300"/><column index="5" value="159"/><column index="6" value="72"/><column index="7" value="119"/><column index="8" value="104"/><column index="9" value="47"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="media_types" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="82"/><column index="2" value="223"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="playlist_track" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="63"/><column index="2" value="54"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="playlists" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="61"/><column index="2" value="215"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sqlite_sequence" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="111"/><column index="2" value="39"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sqlite_stat1" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="119"/><column index="2" value="271"/><column index="3" value="87"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="tracks" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="52"/><column index="2" value="300"/><column index="3" value="58"/><column index="4" value="84"/><column index="5" value="56"/><column index="6" value="300"/><column index="7" value="76"/><column index="8" value="71"/><column index="9" value="59"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/* 
CREATED BY: Steven Tobey
CREATED ON: 12/17/2024
DESCRIPTION: This query selects the first name,
 last name, and email from the customers table.
*/

SELECT
	FirstName,
	LastName,
	Email
FROM
	customers;</sql><sql name="SQL 2">/* 
DESCRIPTION: This query selects the 
first name, last name, email, and phone number 
fields from the customers table and demonstrates four 
different ways to create an alias.
*/

SELECT
	FirstName AS 'First Name',
	LastName AS [Last Name],
	Email AS Email,
	Phone CELL
From
	customers;
	

</sql><sql name="SQL 3">/*
DESCRIPTION: This query selects the first name,
last name, and email from the customers table,
ordered by Last Name.
*/

SELECT
	FirstName AS [First Name],
	LastName AS [Last Name],
	Email AS [EMAIL]
FROM
	customers
ORDER BY
	LastName ASC;
</sql><sql name="SQL 4">/*
DESCRIPTION: This query selects the first name,
last name, and email from the customers table,
ordered by first name (ascending), then last name (descending).
*/

SELECT
	FirstName AS [First Name],
	LastName AS [Last Name],
	Email AS [EMAIL]
FROM
	customers
ORDER BY
	FirstName ASC,
	LastName DESC;</sql><sql name="SQL 5">/*
DESCRIPTION: This query selects the first 10 records
from the customers table, ordered by first name
(ascending), then last name (descending).
*/

SELECT
	FirstName AS [First Name],
	LastName AS [Last Name],
	Email AS [EMAIL]
FROM
	customers
ORDER BY
	FirstName ASC,
	LastName DESC
LIMIT 10;</sql><sql name="SQL 6">/*
DESCRIPTION: This query shows the company 
at the top in descending order.
*/

SELECT
	Company
FROM
	customers
ORDER BY
	Company DESC
LIMIT 1;</sql><sql name="SQL 7">/*
DESCRIPTION: This query answers how many
customers do not have a postal code.
*/

SELECT
	FirstName,
	LastName,
	PostalCode
FROM
	customers
ORDER BY
	PostalCode;</sql><sql name="IN">SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	Total
FROM
	invoices
WHERE
	BillingCity IN ('Tucson', 'Paris', 'London')
ORDER BY
	total;
	</sql><sql name="BETWEEN">SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	Total
FROM
	Invoices
WHERE
	InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31'
ORDER BY
	Total DESC;
	</sql><sql name="SQL 11">SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	invoices
WHERE
	InvoiceDate &gt;'2009-07-09'
ORDER BY
	Total DESC LIMIT 10</sql><sql name="DATE()">/* 
The DATE() function allows us to exclude
the time when specifying our date criteria.
*/

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	invoices
WHERE
	DATE(InvoiceDate) = '2009-01-03'
ORDER BY
	Total;</sql><sql name="SQL 13">SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	invoices
WHERE
	DATE(InvoiceDate) &gt; '2010-01-02' AND Total &lt; 3
ORDER BY
	Total;</sql><sql name="LIKE WILDCARD">/* 
In this query, I demonstrate the LIKE and
AND operators. I also show usage of the wildcard.
*/

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	invoices
WHERE
	BillingCity LIKE 'P%' AND total &gt; 2.00
ORDER BY
	Total;</sql><sql name="OR">SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	invoices
WHERE
	BillingCity LIKE 'p%' OR BillingCity LIKE 'd%'
ORDER BY
	Total;</sql><sql name="OR/AND">/* 
SQL order of operations, the AND operator is
processed first and the OR is processed second.
SQL Processes the AND operator like multiplication
and the OR operator like addition, unless you
include parentheses. Without parentheses, the
AND will be processed in the same way that
3*2+1 would equal 7, but 3*(2+1) would equal 9.
*/

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	invoices
WHERE
	total &gt; 1.98 AND (BillingCity LIKE 'p%' OR
	BillingCity LIKE 'd%')
ORDER BY
	Total;</sql><sql name="CASE">SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total,
	CASE
	WHEN TOTAL &lt; 2.00 THEN 'Baseline Purchase'
	WHEN TOTAL BETWEEN 2.00 AND 6.99 THEN 'Low
	Purchase'
	WHEN TOTAL BETWEEN 7.00 AND 15.00 THEN 'Target
	Purchase'
	ELSE 'Top Performers'
	END AS PurchaseType
FROM
	invoices
WHERE
	PurchaseType = 'Top Performers'
ORDER BY
	BillingCity</sql><sql name="CASE">SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	BillingCountry,
	total,
	CASE
	WHEN BillingCountry = 'USA' THEN 'Domestic Sales'
	ELSE 'Foreign Sales'
	END AS SalesType
FROM
	invoices
WHERE
	Total &gt; 15.00 AND SalesType = &quot;Domestic Sales&quot;
ORDER BY
	BillingCountry</sql><sql name="INNER JOIN">SELECT
	*
FROM
	invoices AS i
INNER JOIN
	customers AS c
ON
	i.CustomerId = c.CustomerID</sql><sql name="SQL 19">SELECT
	c.LastName,
	c.FirstName,
	i.InvoiceId,
	i.CustomerId,
	i.InvoiceDate,
	i.Total
FROM
	invoices AS i
INNER JOIN
	customers AS c
ON
	i.CustomerId = c.CustomerId
ORDER BY
	c.LastName</sql><sql name="3TABLEJOIN">/*
This query shows which 10 employees had
the highest individual sales.
*/

SELECT
	e.FirstName,
	e.LastName,
	e.EmployeeId,
	c.FirstName,
	c.LastName,
	c.SupportRepId,
	i.CustomerId,
	i.Total
FROM
	invoices AS i
INNER JOIN
	customers AS c
ON
	i.CustomerId = c.CustomerId
INNER JOIN
	employees AS e
ON
	c.SupportRepId = e.EmployeeId
ORDER BY
	i.Total DESC
LIMIT 10</sql><sql name="JOIN TABLES!">/*
In this query, I demonstrate my ability to
join tables together and show you the songs
that were purchased that created the 
highest total individual sales.
*/

SELECT
	e.FirstName AS 'Employee First Name',
	e.LastName,
	i.total,
	c.FirstName AS 'Customer First Name',
	c.LastName,
	t.Name AS 'Song',
	ii.UnitPrice
FROM
	invoices AS i
INNER JOIN
	 Customers AS c
ON
	i.CustomerId = c.CustomerId
INNER JOIN
	Employees AS e
ON
	c.SupportRepId = e.EmployeeId
INNER JOIN
	invoice_items AS ii
ON
	i.InvoiceId = ii.InvoiceId
INNER JOIN
	tracks AS t
ON
	ii.TrackId = t.TrackId
ORDER BY
	i.Total DESC
	</sql><sql name="NULL">/*
We must use IS and NOT when dealing with nulls
rather than the equals sign &quot;=&quot; operator. Nulls
represent a lack of data. The = operator compares
the value of two items. Nulls have no value and 
thus cannot be compared using the = operator. 
Attempting to use = will produce an error.
*/

SELECT
	ar.ArtistId AS [ArtistId From Artists Table],
	al.ArtistId AS [ArtistId From Albums Table],
	ar.Name AS [Artist Name],
	al.Title AS [Album Title]
FROM
	artists AS ar
LEFT OUTER JOIN
	albums AS al
ON
	ar.ArtistId = al.ArtistId
WHERE
	al.ArtistId IS NULL</sql><sql name="SQL 23">SELECT
	t.TrackId,
	t.Composer,
	t.Name,
	al.AlbumId,
	al.Title
FROM
	tracks AS t
LEFT OUTER JOIN
	albums AS al
ON
	t.AlbumId = al.AlbumId
WHERE
	t.Composer IS NULL</sql><sql name="SQL 24">SELECT
	g.Name AS 'Genre',
	t.Composer AS 'Artist',
	a.Title AS 'Album',
	t.Name AS 'Song'
FROM
	albums AS a
INNER JOIN
	tracks AS t
ON
	a.AlbumId = t.AlbumId
INNER JOIN
	Genres AS g
ON
	g.GenreId = t.GenreId</sql><sql name="NameCount">SELECT
	COUNT(LastName) AS [Namecount]
FROM
	customers
WHERE
	LastName LIKE 'B%'</sql><sql name="Concatenating">SELECT
	FirstName || LastName
FROM
	customers
WHERE
	CustomerId = 1</sql><sql name="SQL 28">SELECT
	FirstName,
	LastName,
	FirstName || ' ' || LastName AS 'Full Name'
FROM
	customers
WHERE
	Country = &quot;USA&quot;</sql><sql name="SQL 29">SELECT
	FirstName || ' ' || LastName || ' ' || Address
	|| ', ' || City || ', ' || State || ' ' || 
	PostalCode AS [MailingAddress]
FROM
	customers
WHERE
	Country = &quot;USA&quot;</sql><sql name="printf">SELECT
	printf('%s %s %s, %s, %s %s',
	FirstName,
	LastName,
	Address,
	City,
	State,
	PostalCode) AS MailingAddress
FROM
	customers
WHERE
	Country = &quot;USA&quot;;</sql><sql name="LENGTH">SELECT
	PostalCode,
	LENGTH(PostalCode) AS [Postal Code Length]
FROM
	customers
WHERE
	Country = &quot;USA&quot;</sql><sql name="SUBSTR">SELECT
	PostalCode,
	SUBSTR(PostalCode,1,5) AS [Five Digit Postal Code]
FROM
	customers
WHERE
	Country = &quot;USA&quot;</sql><sql name="UPPER lower">SELECT
	FirstName as [First Name Unmodified],
	UPPER(FirstName) as [First Name in UPPERCASE],
	LOWER(FirstName) as [First Name in lowercase],
	UPPER(FirstName) || ' ' || UPPER(LastName) AS
	[Full Name in UPPERCASE]
FROM
	customers</sql><sql name="SUBSTR">SELECT
	UPPER(LastName) as [Last Name],
	SUBSTR(FirstName,1,1) as [First Name Initial]
FROM
	customers
ORDER BY
	LastName</sql><sql name="STRFTIME">/*
String Format Time Function.
*/

SELECT
	STRFTIME('The Year is: %Y The Day is: %d The Month
	is %m', '2011-05-22') AS [Text with Conversion 
	Specifications]</sql><sql name="SQL 36">/*
The current age of each employee.
*/

SELECT
	LastName,
	FirstName,
	STRFTIME('%Y-%m-%d',BirthDate) AS [Birthday No
	Timecode],
	STRFTIME('%Y-%m-%d','now') - STRFTIME('%Y-%m-%d',
	BirthDate) AS [Age]
FROM
	Employees
ORDER BY
	Age</sql><sql name="SQL 37">/*
The company celebrates employees birthdays 
on the first of the month every month.
*/

SELECT
	FirstName,
	LastName,
	STRFTIME('%m-%d',Birthdate) AS [Birthday],
	STRFTIME('%m-01',Birthdate) AS [Celebration Day]
FROM
	employees
ORDER BY
	STRFTIME('%m', Birthdate)

	</sql><sql name="SQL 38">/*
Employees years with the company.
*/

SELECT
	FirstName,
	LastName,
	STRFTIME('%Y-%m-%d', 'now') - STRFTIME('%Y-%m-%d',HireDate) AS [Years With Company]
FROM
	employees</sql><sql name="SQL 39">/*
Which employee has been with the company the longest?
*/

SELECT
	FirstName,
	LastName,
	STRFTIME('%Y-%m-%d', HireDate) AS [Hired]
FROM
	employees
ORDER BY
	STRFTIME('%Y-%m-%d', HireDate) ASC
LIMIT 1
	</sql><sql name="AGGREGATE">SELECT
	SUM(Total) AS [Total Sales],
	AVG(Total) AS AverageSales,
	MAX(Total) AS MaximumSale,
	MIN(Total) AS MinSale,
	COUNT(*) AS SalesCount
FROM
	invoices</sql><sql name="SQL 40">SELECT
	COUNT(InvoiceId) AS [Total Invoices]
FROM
	invoices</sql><sql name="ROUND">SELECT
	AVG(Total) AS [Average Sales],
	ROUND(AVG(Total), 2) AS [Rounded Average Sales]
FROM
	invoices</sql><sql name="GROUP BY">/*
What are the average invoice totals by city?
*/

SELECT
	BillingCity,
	ROUND(AVG(Total), 2)
FROM
	invoices
GROUP BY
	BillingCity
ORDER BY
	BillingCity</sql><sql name="SQL 43">SELECT
	BillingCity,
	AVG(Total)
FROM
	invoices
WHERE
	BillingCity LIKE 'L%'
GROUP BY
	BillingCity
ORDER BY
	BillingCity</sql><sql name="HAVING">/*
Use HAVING clause when using aggregate queries.
*/

SELECT
	BillingCity,
	AVG(Total)
FROM
	invoices
GROUP BY
	BillingCity
HAVING
	AVG(Total) &gt; 5
ORDER BY
	BillingCity</sql><sql name="SQL 45">/*
HAVING is for filtering aggregate functions and WHERE is for non-aggregate functions.
*/

SELECT
	BillingCity,
	AVG(Total)
FROM
	invoices
WHERE
	BillingCity LIKE 'B%'
GROUP BY
	BillingCity
HAVING
	AVG(Total) &gt; 5
ORDER BY
	BillingCity</sql><sql name="SQL 46">SELECT
	BillingCountry,
	BillingCity,
	AVG(Total)
FROM
	invoices
GROUP BY
	BillingCountry, BillingCity
ORDER BY
	BillingCountry</sql><sql name="SQL 47">/*
In this query, I am creating a single-line mailing 
list for all US customers. I capitalized their
full names and included their full addresses
with five-digit zip codes.
*/

SELECT
	UPPER(FirstName) || ' ' || UPPER(LastName)
	|| ', ' || Address || ', ' || City || ' ' || State
	|| ', ' || SUBSTR(PostalCode,1,5) AS [Mailing List]
	
FROM
	customers
WHERE
	Country = &quot;USA&quot;


</sql><sql name="SQL 48">/*
Top ten customers with highest revenue standpoint.
*/

SELECT
	SUM(Total),
	c.FirstName,
	c.LastName
FROM
	invoices i
JOIN
	customers c
ON
	i.CustomerId = c.CustomerId
GROUP BY c.CustomerId
ORDER BY SUM(Total) DESC
LIMIT 10</sql><sql name="SUBQUERY">/*
All invoices that are lower
than the 5.65 average total
using a subquery.
*/

SELECT
	invoiceDate,
	BillingAddress,
	BillingCity,
	Total
FROM
	invoices
WHERE Total &lt;
(select
	AVG(Total)
from
	invoices)
ORDER BY
	Total DESC</sql><sql name="SQL 50">/*
How is each individual city performing
against the global average sales?
*/

SELECT
	BillingCity,
	ROUND(AVG(Total),2) AS [City Average],
	(select
		round(avg(total),2)
	from
		invoices) AS [Global Average]
FROM
	invoices
GROUP BY
	BillingCity
ORDER BY
	BillingCity</sql><sql name="SQL 51">/*
This query shows the highest sale past 2013 that 
beat the highest sale made before 2013.
*/

SELECT
	InvoiceDate,
	BillingCity,
	Total
FROM
	invoices
WHERE
	InvoiceDate &gt;= '2013-01-01' AND total &gt;
	(select
		max(total)
	from
		invoices
	where
		InvoiceDate &lt; '2013-01-01')</sql><sql name="SQL 52">/*
This query shows the invoices received
after invoiceid 251 with a subquery.
*/

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity
FROM
	invoices
WHERE
	InvoiceDate &gt;
	(select
		InvoiceDate
	from
		invoices
	where
		InvoiceId = 251)</sql><sql name="SQL 53">/*
Finding all the invoice dates that
were made with the specific invoice
id's with a subquery.
*/

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity
FROM
	invoices
WHERE
	InvoiceDate IN
	(select
		InvoiceDate
	from
		invoices
	where
		InvoiceId in (251, 252, 255))</sql><sql name="DISTINCT">/*
This query shows all of the songs that
did not show up on any invoice.
*/

SELECT
	TrackId,
	Composer,
	Name
FROM
	tracks
WHERE
	TrackId NOT IN
		(select distinct
			TrackId
		from
			invoice_items)</sql><sql name="SQL 55">/*
How many invoices exceed the average invoice
amount generated in 2010?
*/

SELECT
	InvoiceDate,
	Total
FROM
	invoices
WHERE
Total &gt;
	(select
	round(avg(total),2)
from
	invoices
where
	InvoiceDate between '2010-01-01' and '2010-12-31')
ORDER BY
	Total DESC</sql><sql name="SQL 56">/*
Who were the customers responsible for these invoices?
*/

SELECT
	c.FirstName,
	c.LastName,
	i.InvoiceDate,
	i.Total,
	c.Country
FROM
	invoices i
JOIN
	customers c
ON
	c.CustomerId = i.CustomerId
WHERE
c.Country = 'USA' AND Total &gt;
	(select
	round(avg(total),2)
from
	invoices
where
	InvoiceDate between '2010-01-01' and '2010-12-31')
ORDER BY
	Total DESC</sql><sql name="VIEW">/*
CREATE VIEW V_AvgTotal AS
*/
SELECT
	ROUND(AVG(Total), 2) AS [Average Total]
FROM
	invoices</sql><sql name="SQL 58">SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	Total
FROM
	invoices
WHERE Total &lt;
	(select
		*
	from
		V_AvgTotal)
ORDER BY
	Total DESC</sql><sql name="SQL 59">CREATE VIEW V_Tracks_InvoiceItems AS
SELECT
	ii.InvoiceId,
	ii.UnitPrice,
	ii.Quantity,
	t.Name,
	t.Composer,
	t.Milliseconds
FROM
	invoice_items ii
JOIN
	tracks t
ON
	ii.TrackId = t.TrackId</sql><sql name="SQL 60">CREATE VIEW V_inv_cus_emp AS
SELECT
	i.InvoiceId,
	i.InvoiceDate,
	i.Total,
	i.CustomerId,
	c.FirstName,
	c.LastName,
	c.SupportRepId,
	e.EmployeeId,
	e.LastName,
	e.FirstName,
	e.Title
FROM
	invoices i
JOIN
	customers c
ON
	i.CustomerId = c.CustomerId
JOIN
	employees e
ON
	e.EmployeeId = c.SupportRepId
ORDER BY
	InvoiceDate
	</sql><sql name="SQL 61*">SELECT *
FROM
	V_Tracks_InvoiceItems ii
JOIN
	V_inv_cus_emp ice
ON
	ii.InvoiceId = ice.InvoiceId</sql><current_tab id="60"/></tab_sql></sqlb_project>
